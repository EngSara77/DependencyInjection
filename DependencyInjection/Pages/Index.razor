@page "/"
@using DependencyInjection.Data.Services
@using System.Timers
@using DependencyInjection.Data.Services.Interfaces
@inject ITimeTravel TimeTravel1
@inherits OwningComponentBase


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>



<table class="table table-bordered text-center">
    <thead>
        <tr>
            <th>Service Type</th>
            <th>Operation Of Own Service</th>
            <th>Operation Of Another Service</th>
        </tr>
    </thead>
    <tbody id="OperationsBlock">
        <tr>
            <td class="TransientColor">Transient </td>
            <td class="TransientColor">@service.Transient</td>
            <td class="TransientColor">@service.Transient2</td>
        </tr>
        <tr>
            <td class="ScopedColor">Scoped</td>
            <td class="ScopedColor">@service.Scoped</td>
            <td class="ScopedColor">@service.Scoped2</td>
        </tr>
        <tr>
            <td class="SingletonColor">Singleton</td>
            <td class="SingletonColor">@service.Singleton</td>
            <td class="SingletonColor">@service.Singleton2</td>
        </tr>
    </tbody>
</table>


<ul>
	<li>TimeTravel1.DT: @TimeTravel1?.DT</li>
	<li>TimeTravel2.DT: @TimeTravel2?.DT</li>
</ul>

@code
{
    //[Inject]
    //private DependencyService service { get; set; }

    private DependencyService service { get; set; } = default!;

	private ITimeTravel TimeTravel2 { get; set; } = default!;

    private static System.Timers.Timer timer;
    

    public void CountDownTimer(Object? source, ElapsedEventArgs e)
     {
	    service.TestDependencyLifeCycle();
        InvokeAsync(StateHasChanged);
    }


    protected override async Task OnInitializedAsync()
    {
	    TimeTravel2 = ScopedServices.GetRequiredService<ITimeTravel>();

	    service = ScopedServices.GetRequiredService<DependencyService>();

	    timer = new System.Timers.Timer(1000);
	    timer.Elapsed += CountDownTimer;
	    timer.Enabled = true;
    }
}

    
<style>
    .TransientColor {
        background-color: #fff59c !important
    }

    .ScopedColor {
        background-color: aquamarine !important
    }

    .SingletonColor {
        background-color: #ff292991 !important
    }
</style>